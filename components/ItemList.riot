<ItemList>
  <div>
    <h5>{props.title}</h5>
  </div>

  <p if={props.nb_res == 1 || props.nb_res == 0}>{props.nb_res} résultat</p>
  <p if={props.nb_res > 1}>{props.nb_res} résultats </p>

  <div class="result">
    <div class="grid-container">
      <div class="grid-item" each={item in props.results}>
        <article>
          <div>
            <header class='short-text'>
              <a class="fav" if={ app.isLoggedIn } onclick={ () => toggleFavorite(item) }>
                <i class={ isFavorite(item.id) ? 'fas fa-star favorited' : 'fas fa-star' }></i>
              </a>
              <a if={item.type === 'artist'} href={"/artists_info/"+item.id+"/"+encodeURIComponent(item.cover_image)}>
                <h2 class="title"> {item.title} </h2>
              </a>
              <a if={item.type === 'release'} href={"/~kabbouri/s4_mp_R4.01_R4.A.10/releases_info/"+item.id}>
                <h2 class="title"> {item.title} </h2>
              </a>
              <a if={item.type === 'master'} href={"/~kabbouri/s4_mp_R4.01_R4.A.10/masterview/" + item.master_id + "/" + encodeURIComponent(item.cover_image)}>
                <h2 class="title"> {item.title} </h2>
              </a>
              <a if={item.type === 'label'}>
                <h2 class="title"> {item.title} </h2>
              </a>
            </header>

            <img class="image" src={item.cover_image} alt="Cover" />
            <div if={item.type === 'release'}>
            <br />
              <a href={"/~kabbouri/s4_mp_R4.01_R4.A.10/masterview/" + item.master_id + "/" + encodeURIComponent(item.cover_image)}> Voir son Master</a> 
            </div>

            <footer if={item.community} class="short-text">
              <span class="want">
                {item.community.want} <i class="fas fa-check"></i>
              </span>
              <span class="have">
                {item.community.have} <i class="fas fa-heart"></i>
              </span>
            </footer>
          </div>
        </article>
      </div>
    </div>
  </div>

  <script>
    export default {
      props: ['title', 'results', 'nb_res'],

      app: {
        isLoggedIn: false,
        favorites: []
      },

      onMounted() {
        this.app.isLoggedIn = localStorage.getItem("isLoggedIn");
        this.loadFavorites();
      },

      async loadFavorites() {
        this.app.favorites = await window.getFavorites();
        this.update();
      },

      isFavorite(id) {
        return this.app.favorites.some(fav => fav.item_id === id);
      },



      async toggleFavorite(item) {

        if (this.isFavorite(item.id)) {

          let fav = this.app.favorites.filter(fav => fav.item_id === item.id);
          fav.forEach(async (elt) => {
            await window.removeFavorite(elt.id);
          });
        } else {
          await window.addFavorite(item.id, item.type, item.cover_image, item.title);
        }

        this.loadFavorites();
      }
    };
  </script>

  <style>
    .fav i {
      font-size: 1.5rem;
      cursor: pointer;
      transition: color 0.3s ease;
      color: blue;
    }

    .favorited {
      color: gold !important;
    }
  </style>
</ItemList>

